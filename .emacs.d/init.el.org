#+TITLE: Emacs Configuration
#+AUTHOR: Stefan Boesen
#+EMAIL: stefan.boesen@gmail.com
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

#+NAME: Note
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :exports none
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------


(package-initialize)
(require 'cl)
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
						 ("marmalade" . "http://marmalade-repo.org/packages/")
						 ("elpa" . "http://tromey.com/elpa/")
						 ("org" . "http://orgmode.org/elpa/")
						 ("melpa" . "http://melpa.milkbox.net/packages/")
						 ("sunrise" . "http://joseito.republika.pl/sunrise-commander/")))

;;;(add-to-list 'load-path "~/.emacs.d/")

(defun package-try-install (package)
  "installs package if not installed"
  (let* ((ARCHIVES (if (null package-archive-contents)
                       (progn (package-refresh-contents)
                              package-archive-contents)
                    package-archive-contents))
         (AVAIL (some (lambda (elem)
                        (eq (car elem) package))
                      ARCHIVES)))
    (if AVAIL
        (package-install package))))

(if (null (require 'req-package "req-package" t))
    ;; requre failed, it might be first start.
    ;; try to fetch archives and install req-package.
    ;; then require again.
    (progn (package-try-install 'req-package)
           (require 'req-package)))


(setq evil-want-C-u-scroll t)
(req-package evil
  :init 
  (progn
    (evil-mode 1))
  :config
  (progn
    (evil-ex-define-cmd "tan[gle]" 'org-babel-tangle)))

(req-package surround)

(req-package evil-numbers
  :config
  (progn
    (define-key evil-normal-state-map (kbd "C-A") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-S-A") 'evil-numbers/dec-at-pt)))

(req-package zenburn-theme
  :init
  (progn
    (load-theme 'zenburn t)))

(req-package exec-path-from-shell
  :init
  (progn
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))))

(req-package dart-mode)

(req-package flycheck
  :init
  (progn
    (add-hook 'after-init-hook #'global-flycheck-mode)))

; Need to install ycmd manually. Should be able to put it in
; submodule list. Install to .emacs.d/ycmd. Though will that work with changes?
; maybe shell script.
(req-package ycmd
  :init
  (progn
    (set-variable 'ycmd-server-command '("python2" "/Users/stefan/.emacs.d/ycmd/ycmd/__main__.py"))
    (set-variable 'ycmd-global-config "/Users/stefan/.emacs.d/.ycm_extra_conf.py")
    (ycmd-setup)))
(req-package company-ycmd
  :init
  (progn
    (company-ycmd-setup)))

(req-package company-mode
  :init
  (progn
    (add-hook 'after-init-hook 'global-company-mode)))

(req-package-finish)

#+END_SRC


** Cleanup
   Who wants all that toolbars and scrollbars noise?
   
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (tool-bar-mode -1)
     
    (menu-bar-mode -1)
   #+END_SRC
   
* IDE
  A few conveniences that I like to have in all my =prog-mode= buffers.

* Annoyances
  Fixing a couple of gripes I have with Emacs.

** Ignore bell sound
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq ring-bell-function #'ignore)
   #+END_SRC
** Backups and Autosave Files
   These things end up everywhere, so let's stick them all in a temporary
   directory.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'files)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
     (setq create-lockfiles nil)
   #+END_SRC
