#+TITLE: Emacs Configuration
#+AUTHOR: Stefan Boesen
#+EMAIL: stefan.boesen@gmail.com
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

#+NAME: Note
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :exports none
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
  (require 'pallet)
#+END_SRC

* Package Management with Pallet
  [[https://github.com/rdallasgray/pallet][Pallet]] is a wonderful little tool built on [[https://github.com/cask/cask][Cask]], a dependency management tool
  for Emacs packages. Pallet adds automatic updating of the =Caskfile= when
  packages are installed and deleted.

  Also: Remember to run (byte-recompile-directory (expand-file-name "~/.emacs.d") 0). Speeds up load times.

** Installing Cask
   Just run this command in your terminal of choice:

   #+NAME: Cask Installation
   #+BEGIN_SRC sh
     $ curl -fsSkL https://raw.github.com/cask/cask/master/go | python
   #+END_SRC

   then add =~/.cask/bin= to your =PATH= so that you can use =cask=.

   
* Keybindings

** =undo-tree=
    Standard Emacs undo is kind of confusing. [[http://www.dr-qubit.org/emacs.php#undo-tree][undo-tree]] replaces this with a
    simpler tree structure. It also allows us to visualize the tree directly.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (require 'undo-tree)
    #+END_SRC
    
** Keybinding Table

#+TBLNAME: keys
| Combo | Description                 | Mode | Command                                    |
|-------+-----------------------------+------+--------------------------------------------|
| TAB   | Cycle heading visibility    | Org  | org-cycle                                  |

* fiplr
  #+BEGIN_SRC emacs-list :tangle ~/.emacs.d/init.el
    (require 'fiplr)
    (require 'helm)
    (global-set-key (kbd "C-t") 'fiplr-find-file)
    (global-set-key (kbd "C-b") 'helm-mini)
  #+END_SRC
* W3M
   This just sets w3m to use images and sets w3m to be default browser.
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq w3m-default-display-inline-images t)
     (setq browse-url-browser-function 'w3m-browse-url)
     (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
   #+END_SRC
* ZNC
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'znc)
  #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'org)

    (setq org-default-notes-file "~/.notes/inbox.org")

    (setq org-src-fontify-natively t)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    
  #+END_SRC
* ERC
  Set the width for messages to be displayed
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq erc-fill-column 120)
  #+END_SRC
* UI
** Switch Window
  Bind C-x o to switch-window
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'switch-window)
    (global-set-key (kbd "C-x o") 'switch-window)
  #+END_SRC
** Theme

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'custom-theme-load-path
		 (file-name-as-directory "~/.emacs.d/themes/"))
    (load-theme 'zenburn t)
    #+END_SRC

** Cleanup
   Who wants all that toolbars and scrollbars noise?
   
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (tool-bar-mode -1)
     
    (menu-bar-mode -1)
   #+END_SRC
   
* IDE
  A few conveniences that I like to have in all my =prog-mode= buffers.

** Ruby Mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (add-to-list 'auto-mode-alist
               '("\\.\\(?:gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist
               '("\\(Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . ruby-mode))
  #+END_SRC
** Eshell
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (require 'eshell)
   #+END_SRC
** Magit
   The only git wrapper that matters.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'magit)
   #+END_SRC
** Line Numbers
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'linum)
     (linum-mode 1)
   #+END_SRC


* Annoyances
  Fixing a couple of gripes I have with Emacs.

** Ignore bell sound
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq ring-bell-function #'ignore)
   #+END_SRC
** Backups and Autosave Files
   These things end up everywhere, so let's stick them all in a temporary
   directory.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'files)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
     (setq create-lockfiles nil)
   #+END_SRC
** Set PATH, exec-path, etc equal to terminal values

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
   #+END_SRC
** Set customize-group file to be out of version control
   This file contains the password to auth with ZNC, amongst other things.
   Any non-local config is done in init.el.org instead.
   
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq custom-file "~/.emacs.d/custom.el")
     (load custom-file)
   #+END_SRC
