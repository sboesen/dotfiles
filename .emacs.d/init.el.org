#+TITLE: Emacs Configuration
#+AUTHOR: Jack Henahan
#+EMAIL: jhenahan@me.com

#+NAME: Note
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :exports none
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
  (require 'pallet)
#+END_SRC

* Package Management with Pallet
  [[https://github.com/rdallasgray/pallet][Pallet]] is a wonderful little tool built on [[https://github.com/cask/cask][Cask]], a dependency management tool
  for Emacs packages. Pallet adds automatic updating of the =Caskfile= when
  packages are installed and deleted.

** Installing Cask
   Just run this command in your terminal of choice:

   #+NAME: Cask Installation
   #+BEGIN_SRC sh
     $ curl -fsSkL https://raw.github.com/cask/cask/master/go | python
   #+END_SRC

   then add =~/.cask/bin= to your =PATH= so that you can use =cask=.

   
* Keybindings

** =evil=
   I always want evil to be loaded, and to be the default mode. Bind a few ex.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq evil-default-cursor t)
    (setq evil-want-C-u-scroll t)
    (require 'evil)
    (evil-mode 1)

    (defun my-move-key (keymap-from keymap-to key)
      "Moves key binding from one keymap to another, deleting from the old location. "
      (define-key keymap-to key (lookup-key keymap-from key))
      (define-key keymap-from key nil))

    (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
    (my-move-key evil-motion-state-map evil-normal-state-map " ")

    (define-key evil-normal-state-map "H" 'evil-first-non-blank)
    (define-key evil-normal-state-map ",," 'evil-buffer)

    (evil-set-initial-state 'org-capture-mode 'insert)

    (evil-ex-define-cmd "ta[ngle]" 'org-babel-tangle)
    ;;; C-c as general purpose escape key sequence.
    ;;;
    (defun my-esc (prompt)
      "Functionality for escaping generally.  Includes exiting Evil insert state and C-g binding. "
      (cond
       ;; If we're in one of the Evil states that defines [escape] key, return [escape] so as
       ;; Key Lookup will use it.
       ((or (evil-insert-state-p) (evil-normal-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape])
       ;; This is the best way I could infer for now to have C-c work during evil-read-key.
       ;; Note: As long as I return [escape] in normal-state, I don't need this.
       ;;((eq overriding-terminal-local-map evil-read-key-map) (keyboard-quit) (kbd ""))
       (t (kbd "C-g"))))
    (define-key key-translation-map (kbd "C-c") 'my-esc)
    ;; Works around the fact that Evil uses read-event directly when in operator state, which
    ;; doesn't use the key-translation-map.
    (define-key evil-operator-state-map (kbd "C-c") 'keyboard-quit)

   #+END_SRC
   

*** =evil-numbers=
    One of the little Vim conveniences not found in vanilla Evil is incrementing
    and decrementing numbers with =C-a= and =C-x=, respectively, likely because
    these are already important bindings in Emacs. However, by limiting the
    effect to normal mode, we can use [[https://github.com/cofi/evil-numbers][evil-numbers]] to bring this functionality
    back without stomping all over existing bindings.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      ;;;(require 'evil-numbers)
      ;;;(bind-key "C-a" 'evil-numbers/inc-at-pt evil-normal-state-map)
      ;;;(bind-key "C-x" 'evil-numbers/dec-at-pt evil-normal-state-map)
    #+END_SRC

*** =evil-surround=
    Working with delimiter pairs is common enough that Tim Pope wrote a plugin
    to ease working with them in Vim, called [[https://github.com/tpope/vim-surround][vim-surround]]. [[https://github.com/timcharper/evil-surround][evil-surround]]
    emulates this functionality in =evil=. It's quite extensible, but the
    defaults seem to cover all my needs. Check out the README for some examples.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (require 'surround)
    #+END_SRC

*** =undo-tree=
    Standard Emacs undo is kind of confusing. [[http://www.dr-qubit.org/emacs.php#undo-tree][undo-tree]] replaces this with a
    simpler tree structure. It also allows us to visualize the tree directly.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (require 'undo-tree)
    #+END_SRC
    
* Projectile
  #+BEGIN_SRC emacs-list :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-p") 'projectile-find-file)
    (global-set-key (kbd "C-b") 'projectile-switch-to-buffer)
    (setq projectile-indexing-method 'git)
    (setq projectile-enable-caching t)
    (projectile-global-mode t)
  #+END_SRC

* Org
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'org)

    (setq org-default-notes-file "~/notes/inbox.org")

    (define-key key-translation-map (kbd "zt") (kbd "M-p M-r"))
    (define-key evil-normal-state-map  (kbd "M-p M-r") 'org-todo) ;; Rotate todo state

    (define-key key-translation-map (kbd "zT") (kbd "M-a M-t"))
    (define-key evil-normal-state-map  (kbd "M-a M-t") 'org-todo-list) ;; Global todo list

    (define-key key-translation-map (kbd "zl") (kbd "M-a M-d"))
    (define-key evil-normal-state-map (kbd "M-a M-d") 'org-insert-todo-heading) ;; Add new todo

    (define-key key-translation-map (kbd "za") (kbd "M-a M-k"))
    (define-key evil-normal-state-map (kbd "M-a M-k") 'org-agenda-file-to-front) ;; 

    (define-key key-translation-map (kbd "zc") (kbd "M-a M-c"))
    (define-key evil-normal-state-map (kbd "M-a M-c") 'org-cycle) ;; 

    (define-key key-translation-map (kbd "zg") (kbd "M-a M-g"))
    (define-key evil-normal-state-map (kbd "M-a M-g") 'org-global-cycle)
  #+END_SRC
* UI
  I'm pretty picky about how I want my editor to look, so there's a fair bit of
  configuration that goes here.

** Theme

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'custom-theme-load-path
		 (file-name-as-directory "~/.emacs.d/themes/"))
    (load-theme 'zenburn t)
    #+END_SRC
** Modeline
   Powerline is very popular in Vim (and with Evil users), but I much prefer
   [[https://github.com/Bruce-Connor/smart-mode-line][smart-mode-line]]. It's compatible with just about anything you can imagine,
   and it's easy to set up.

   
*** =smart-mode-line=
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'smart-mode-line)
    #+END_SRC

** Cleanup
   Who wants all that toolbars and scrollbars noise?
   
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (tool-bar-mode -1)
     
    (menu-bar-mode -1)
   #+END_SRC

* IDE
  A few conveniences that I like to have in all my =prog-mode= buffers.


** Magit
   The only git wrapper that matters.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'magit)
   #+END_SRC
** Line Numbers
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'linum)
     (linum-mode 1)
   #+END_SRC

*** Relative Line Numbers
    I was a little spoiled by this feature in Vim, and not having it
    just doesn't sit well with me.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (setq linum-relative-current-symbol "")
      (require 'linum-relative)
    #+END_SRC


* Annoyances
  Fixing a couple of gripes I have with Emacs.

** Backups and Autosave Files
   These things end up everywhere, so let's stick them all in a temporary
   directory.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'files)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+END_SRC
** Questions
   Keep it short.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
