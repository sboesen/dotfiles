#+TITLE: Emacs Configuration
#+AUTHOR: Stefan Boesen
#+EMAIL: stefan.boesen@gmail.com
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

#+NAME: Note
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :exports none
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------


(package-initialize)
(require 'cl)
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
						 ("marmalade" . "http://marmalade-repo.org/packages/")
						 ("elpa" . "http://tromey.com/elpa/")
						 ("org" . "http://orgmode.org/elpa/")
						 ("melpa" . "http://melpa.milkbox.net/packages/")
						 ("sunrise" . "http://joseito.republika.pl/sunrise-commander/")))

(add-to-list 'load-path "~/.emacs.d/")

(defun package-try-install (package)
  "installs package if not installed"
  (let* ((ARCHIVES (if (null package-archive-contents)
                       (progn (package-refresh-contents)
                              package-archive-contents)
                     package-archive-contents))
         (AVAIL (some (lambda (elem)
                        (eq (car elem) package))
                      ARCHIVES)))
    (if AVAIL
        (package-install package))))

(if (null (require 'req-package "req-package" t))
    ;; requre failed, it might be first start.
    ;; try to fetch archives and install req-package.
    ;; then require again.
    (progn (package-try-install 'req-package)
           (require 'req-package)))


(setq evil-want-C-u-scroll t)
(req-package evil
  :init 
  (progn
    (evil-mode 1))
  :config
  (progn
    (evil-ex-define-cmd "tan[gle]" 'org-babel-tangle)))

(req-package surround)

(req-package evil-numbers
  :config
  (progn
    (define-key evil-normal-state-map (kbd "C-A") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-S-A") 'evil-numbers/dec-at-pt)))

(req-package zenburn-theme
  :init
  (progn
    (load-theme 'zenburn t)))

(req-package exec-path-from-shell
  :init
  (progn
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))))


(add-to-list 'load-path "/usr/local/Cellar/mu/0.9.9.6/share/emacs/site-lisp/mu4e")
(setq mu4e-maildir "/Users/stefan/Mail/")
(setq mu4e-sent-folder "/VPSSent")
(setq mu4e-drafts-folder "/VPSDrafts")
(setq mu4e-trash-folder "/VPSTrash")
(setq mu4e-refile-folder "/VPSArchive")
(setq mu4e-attachment-dir "~/Mail/Attachments")

(setq mu4e-get-mail-command "mbsync -a")

(setq
  message-send-mail-function 'smtpmail-send-it
  starttls-use-gnutls t
  smtpmail-starttls-credentials
    '(("boesen.me" 587 nil nil))
  smtpmail-auth-credentials
    '(("boesen.me" 587 "stefan" nil))
  smtpmail-default-smtp-server "boesen.me"
  smtpmail-smtp-server "boesen.me"
  smtpmail-debug-info t
  smtpmail-smtp-service 587)

(setq
  user-mail-address "stefan@boesen.me"
  user-full-name "Stefan Boesen"
  mu4e-compose-signature
    (concat
      "Stefan\n"))
(require 'mu4e)


(req-package-finish)

#+END_SRC


** Cleanup
   Who wants all that toolbars and scrollbars noise?
   
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (tool-bar-mode -1)
     
    (menu-bar-mode -1)
   #+END_SRC
   
* IDE
  A few conveniences that I like to have in all my =prog-mode= buffers.

* Annoyances
  Fixing a couple of gripes I have with Emacs.

** Ignore bell sound
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq ring-bell-function #'ignore)
   #+END_SRC
** Backups and Autosave Files
   These things end up everywhere, so let's stick them all in a temporary
   directory.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'files)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
     (setq create-lockfiles nil)
   #+END_SRC
