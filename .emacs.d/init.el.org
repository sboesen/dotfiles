#+TITLE: Emacs Configuration
#+AUTHOR: Stefan Boesen
#+EMAIL: stefan.boesen@gmail.com
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

#+RESULTS:
| ~/.emacs.d/init.el |


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :exports none
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------

(require 'cl)
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
						 ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

(setq use-package-always-ensure t)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq evil-want-C-u-scroll t)
(use-package evil
  :init
  (progn
    (evil-mode))
  :config
  (progn
    (evil-ex-define-cmd "tan[gle]" 'org-babel-tangle)))

(use-package evil-surround)

(use-package evil-numbers
  :config
  (progn
    (define-key evil-normal-state-map (kbd "C-A") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-S-A") 'evil-numbers/dec-at-pt)))

; Syntax highlighting within #+BEGIN_SRC blocks
(setq org-src-fontify-natively t)
(use-package org)

(use-package flycheck
  :init
  (progn
    (add-hook 'after-init-hook #'global-flycheck-mode)))

(use-package evil-leader
  :init
  (progn
    (global-evil-leader-mode))
  :config
  (progn
    (evil-leader/set-leader ",") 
    (evil-leader/set-key "."  'aya-one-line)
    (evil-leader/set-key "," 'evil-buffer)
    (evil-leader/set-key "C"  (lambda() (interactive)(find-file "~/.emacs.d/init.el.org")))
    (evil-leader/set-key "c"  'aya-create) ;TODO: Figure how to auto insert mode
    (evil-leader/set-key "s"  'aya-persist-snippet)
    (evil-leader/set-key "e"  'aya-expand)))


(use-package pos-tip)

; TODO get documentation popups working...
; (use-package company-statistics
;   :init (company-statistics-mode))
; (use-package company-c-headers
;   :init (add-to-list 'company-backends 'company-c-headers))
; (use-package inf-ruby)
; (use-package company-anaconda
;   :init (add-to-list 'company-backends 'company-anaconda))
; (use-package company-inf-ruby
;   :init (add-to-list 'company-backends 'company-inf-ruby))
; (use-package web-completion-data)
; (use-package company-quickhelp
;   :init (company-quickhelp-mode)
;   :config (setq company-quickhelp-delay 0.5))

(use-package irony
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
(use-package company-irony)
(use-package company-irony-c-headers)

(use-package company
  :init
  (progn
    (global-company-mode)))
(use-package rvm)

(use-package magit)

(use-package tex
  :ensure auctex)

(use-package delight)

(use-package projectile
  :delight '(:eval (concat " " (projectile-project-name))))

(use-package rainbow-mode
  :delight)

(use-package yasnippet)

(use-package auto-yasnippet)

(use-package narrow-reindent)

(use-package smex)

(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (deactivate-mark)
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))

(evil-define-operator evil-narrow-indirect (beg end type)
  "Indirectly narrow the region from BEG to END."
  (interactive "<R>")
  (evil-normal-state)
  (narrow-to-region-indirect beg end))

(define-key evil-normal-state-map "m" 'evil-narrow-indirect)
(define-key evil-visual-state-map "m" 'evil-narrow-indirect)

(setq yas-wrap-around-region ?y)
(defun evil-visual-insert-snippet ()
  (interactive)
  (when (evil-visual-state-p)
    (call-interactively #'narrow-to-region)
    (execute-kbd-macro "gv")
    (setq evil-this-register ?y)
    (execute-kbd-macro "y")
    (call-interactively #'widen)
    (execute-kbd-macro "gv")
    (setq evil-this-register ?n)
    (call-interactively #'evil-substitute)
    (yas-insert-snippet)))

(use-package counsel
  :init
  (progn
    (counsel-mode)))
; borrowed from https://raw.githubusercontent.com/kaushalmodi/.emacs.d/master/setup-files/setup-ivy.el
(use-package ivy
  :config
  (progn
    (ivy-mode 1)

    ;; Show recently killed buffers when calling `ivy-switch-buffer'
    (setq ivy-use-virtual-buffers t)
    (setq ivy-virtual-abbreviate 'full) ;Show the full virtual file paths

    (setq ivy-count-format "%d/%d ")
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))

    ;; Do not show "./" and "../" in the `counsel-find-file' completion list
    (setq ivy-extra-directories nil)    ;Default value: ("../" "./")

    (defun modi/ivy-set-prompt-text-properties (prompt std-props)
      "Add a different face for the \"<..>\" string in `counsel-set-variable'."
      (ivy--set-match-props prompt "<\\(.*\\)>"
                            `(face font-lock-string-face ,@std-props) 1)
      (ivy-set-prompt-text-properties-default prompt std-props))
    (setq ivy-set-prompt-text-properties-function 'modi/ivy-set-prompt-text-properties)

    ;; https://github.com/abo-abo/swiper/blob/master/ivy-hydra.el
    (use-package ivy-hydra
      :ensure t
      :config
      (progn
        ;; Re-define the `hydra-ivy' defined in `ivy-hydra' package.
        (defhydra hydra-ivy (:hint nil
                             :color pink)
          "
^ _,_ ^      _f_ollow      occ_u_r      _g_o          ^^_c_alling: %-7s(if ivy-calling \"on\" \"off\")      _w_(prev)/_s_(next)/_a_(read) action: %-14s(ivy-action-name)
_p_/_n_      _d_one        ^^           _i_nsert      ^^_m_atcher: %-7s(ivy--matcher-desc)^^^^^^^^^^^^      _C_ase-fold: %-10`ivy-case-fold-search
^ _._ ^      _D_o it!      ^^           _q_uit        _<_/_>_ shrink/grow^^^^^^^^^^^^^^^^^^^^^^^^^^^^       _t_runcate: %-11`truncate-lines
"
          ;; Arrows
          ("," ivy-beginning-of-buffer)      ;Default h
          ("p" ivy-previous-line)            ;Default j
          ("n" ivy-next-line)                ;Default k
          ("." ivy-end-of-buffer)            ;Default l
          ;; Quit ivy
          ("q" keyboard-escape-quit :exit t) ;Default o
          ("C-g" keyboard-escape-quit :exit t)
          ;; Quit hydra
          ("i" nil)
          ("C-o" nil)
          ;; actions
          ("f" ivy-alt-done :exit nil)
          ;; Exchange the default bindings for C-j and C-m
          ("C-m" ivy-alt-done :exit nil) ;RET, default C-j
          ("C-j" ivy-done :exit t)       ;Default C-m
          ("d" ivy-done :exit t)
          ("D" ivy-immediate-done :exit t)
          ("g" ivy-call)
          ("c" ivy-toggle-calling)
          ("m" ivy-rotate-preferred-builders)
          (">" ivy-minibuffer-grow)
          ("<" ivy-minibuffer-shrink)
          ("w" ivy-prev-action)
          ("s" ivy-next-action)
          ("a" ivy-read-action)
          ("t" (setq truncate-lines (not truncate-lines)))
          ("C" ivy-toggle-case-fold)
          ("u" ivy-occur :exit t)
          ("?" (ivy-exit-with-action    ;Default D
                (lambda (_) (find-function #'hydra-ivy/body))) "Definition of this hydra" :exit t))

        (bind-keys
         :map ivy-minibuffer-map
         ("C-t" . ivy-rotate-preferred-builders)
         ("C-o" . hydra-ivy/body)
         ("M-o" . ivy-dispatching-done-hydra))))

    (bind-keys
     :map ivy-minibuffer-map
     ;; Exchange the default bindings for C-j and C-m
     ("C-m" . ivy-alt-done)             ;RET, default C-j
     ("C-j" . ivy-done)                 ;Default C-m
     ("C-S-m" . ivy-immediate-done))

    (bind-keys
     :map ivy-occur-mode-map
     ("n" . ivy-occur-next-line)
     ("p" . ivy-occur-previous-line)
     ("b" . backward-char)
     ("f" . forward-char)
     ("v" . ivy-occur-press)            ;Default f
     ("RET" . ivy-occur-press))

    (with-eval-after-load 'setup-windows-buffers
      (bind-keys
       :map ivy-minibuffer-map
       ("C-x k" . modi/kill-buffer-dwim) ;Aborts recursive edit
       ("C-)" . modi/kill-buffer-dwim))) ;Aborts recursive edit

    ;; Bind C-k to kill a buffer directly from the list shown on doing M-x ivy-switch-buffer.
    ;; https://github.com/abo-abo/swiper/issues/164
    (defun modi/ivy-kill-buffer ()
      (interactive)
      (ivy-set-action 'kill-buffer)
      (ivy-done))
    (bind-keys
     :map ivy-switch-buffer-map
     ("C-k" . modi/ivy-kill-buffer))))

(provide 'init)
#+END_SRC


** Cleanup
   Who wants all that toolbars and scrollbars noise?
   
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (tool-bar-mode -1)
     
    (menu-bar-mode -1)
   #+END_SRC
   
* IDE
  A few conveniences that I like to have in all my =prog-mode= buffers.

* Annoyances
  Fixing a couple of gripes I have with Emacs.

** Ignore bell sound
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq ring-bell-function #'ignore)
   #+END_SRC
** Backups and Autosave Files
   These things end up everywhere, so let's stick them all in a temporary
   directory.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (require 'files)
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
     (setq create-lockfiles nil)
   #+END_SRC
